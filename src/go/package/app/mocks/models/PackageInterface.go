// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "market.goravel.dev/package/app/models"
)

// PackageInterface is an autogenerated mock type for the PackageInterface type
type PackageInterface struct {
	mock.Mock
}

// AttachTags provides a mock function with given fields: pkg, tags
func (_m *PackageInterface) AttachTags(pkg *models.Package, tags []string) error {
	ret := _m.Called(pkg, tags)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Package, []string) error); ok {
		r0 = rf(pkg, tags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPackageByID provides a mock function with given fields: id, fields
func (_m *PackageInterface) GetPackageByID(id string, fields []string) (*models.Package, error) {
	ret := _m.Called(id, fields)

	var r0 *models.Package
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) (*models.Package, error)); ok {
		return rf(id, fields)
	}
	if rf, ok := ret.Get(0).(func(string, []string) *models.Package); ok {
		r0 = rf(id, fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Package)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(id, fields)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePackage provides a mock function with given fields: pkg
func (_m *PackageInterface) UpdatePackage(pkg *models.Package) error {
	ret := _m.Called(pkg)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Package) error); ok {
		r0 = rf(pkg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPackageInterface creates a new instance of PackageInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPackageInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PackageInterface {
	mock := &PackageInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
