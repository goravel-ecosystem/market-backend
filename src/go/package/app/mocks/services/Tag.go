// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "market.goravel.dev/package/app/models"
)

// Tag is an autogenerated mock type for the Tag type
type Tag struct {
	mock.Mock
}

// GetTags provides a mock function with given fields: packageID, userID, name
func (_m *Tag) GetTags(packageID string, userID string, name string) ([]*models.Tag, error) {
	ret := _m.Called(packageID, userID, name)

	var r0 []*models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]*models.Tag, error)); ok {
		return rf(packageID, userID, name)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []*models.Tag); ok {
		r0 = rf(packageID, userID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(packageID, userID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTag creates a new instance of Tag. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTag(t interface {
	mock.TestingT
	Cleanup(func())
}) *Tag {
	mock := &Tag{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
