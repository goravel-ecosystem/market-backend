// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "market.goravel.dev/user/app/models"
)

// User is an autogenerated mock type for the User type
type User struct {
	mock.Mock
}

type User_Expecter struct {
	mock *mock.Mock
}

func (_m *User) EXPECT() *User_Expecter {
	return &User_Expecter{mock: &_m.Mock}
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *User) GetUserByEmail(email string) (*models.User, error) {
	ret := _m.Called(email)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type User_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - email string
func (_e *User_Expecter) GetUserByEmail(email interface{}) *User_GetUserByEmail_Call {
	return &User_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", email)}
}

func (_c *User_GetUserByEmail_Call) Run(run func(email string)) *User_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *User_GetUserByEmail_Call) Return(_a0 *models.User, _a1 error) *User_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *User_GetUserByEmail_Call) RunAndReturn(run func(string) (*models.User, error)) *User_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: id
func (_m *User) GetUserByID(id string) (*models.User, error) {
	ret := _m.Called(id)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type User_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - id string
func (_e *User_Expecter) GetUserByID(id interface{}) *User_GetUserByID_Call {
	return &User_GetUserByID_Call{Call: _e.mock.On("GetUserByID", id)}
}

func (_c *User_GetUserByID_Call) Run(run func(id string)) *User_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *User_GetUserByID_Call) Return(_a0 *models.User, _a1 error) *User_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *User_GetUserByID_Call) RunAndReturn(run func(string) (*models.User, error)) *User_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// IsEmailExist provides a mock function with given fields: email
func (_m *User) IsEmailExist(email string) (bool, error) {
	ret := _m.Called(email)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User_IsEmailExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEmailExist'
type User_IsEmailExist_Call struct {
	*mock.Call
}

// IsEmailExist is a helper method to define mock.On call
//   - email string
func (_e *User_Expecter) IsEmailExist(email interface{}) *User_IsEmailExist_Call {
	return &User_IsEmailExist_Call{Call: _e.mock.On("IsEmailExist", email)}
}

func (_c *User_IsEmailExist_Call) Run(run func(email string)) *User_IsEmailExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *User_IsEmailExist_Call) Return(_a0 bool, _a1 error) *User_IsEmailExist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *User_IsEmailExist_Call) RunAndReturn(run func(string) (bool, error)) *User_IsEmailExist_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: name, email, password
func (_m *User) Register(name string, email string, password string) (*models.User, error) {
	ret := _m.Called(name, email, password)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*models.User, error)); ok {
		return rf(name, email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *models.User); ok {
		r0 = rf(name, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(name, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type User_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - name string
//   - email string
//   - password string
func (_e *User_Expecter) Register(name interface{}, email interface{}, password interface{}) *User_Register_Call {
	return &User_Register_Call{Call: _e.mock.On("Register", name, email, password)}
}

func (_c *User_Register_Call) Run(run func(name string, email string, password string)) *User_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *User_Register_Call) Return(_a0 *models.User, _a1 error) *User_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *User_Register_Call) RunAndReturn(run func(string, string, string) (*models.User, error)) *User_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewUser creates a new instance of User. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *User {
	mock := &User{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
