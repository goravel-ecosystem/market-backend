// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Notification is an autogenerated mock type for the Notification type
type Notification struct {
	mock.Mock
}

type Notification_Expecter struct {
	mock *mock.Mock
}

func (_m *Notification) EXPECT() *Notification_Expecter {
	return &Notification_Expecter{mock: &_m.Mock}
}

// SendEmailRegisterCode provides a mock function with given fields: ctx, email
func (_m *Notification) SendEmailRegisterCode(ctx context.Context, email string) (string, error) {
	ret := _m.Called(ctx, email)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Notification_SendEmailRegisterCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEmailRegisterCode'
type Notification_SendEmailRegisterCode_Call struct {
	*mock.Call
}

// SendEmailRegisterCode is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *Notification_Expecter) SendEmailRegisterCode(ctx interface{}, email interface{}) *Notification_SendEmailRegisterCode_Call {
	return &Notification_SendEmailRegisterCode_Call{Call: _e.mock.On("SendEmailRegisterCode", ctx, email)}
}

func (_c *Notification_SendEmailRegisterCode_Call) Run(run func(ctx context.Context, email string)) *Notification_SendEmailRegisterCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Notification_SendEmailRegisterCode_Call) Return(key string, err error) *Notification_SendEmailRegisterCode_Call {
	_c.Call.Return(key, err)
	return _c
}

func (_c *Notification_SendEmailRegisterCode_Call) RunAndReturn(run func(context.Context, string) (string, error)) *Notification_SendEmailRegisterCode_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyEmailRegisterCode provides a mock function with given fields: key, code
func (_m *Notification) VerifyEmailRegisterCode(key string, code string) bool {
	ret := _m.Called(key, code)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(key, code)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Notification_VerifyEmailRegisterCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyEmailRegisterCode'
type Notification_VerifyEmailRegisterCode_Call struct {
	*mock.Call
}

// VerifyEmailRegisterCode is a helper method to define mock.On call
//   - key string
//   - code string
func (_e *Notification_Expecter) VerifyEmailRegisterCode(key interface{}, code interface{}) *Notification_VerifyEmailRegisterCode_Call {
	return &Notification_VerifyEmailRegisterCode_Call{Call: _e.mock.On("VerifyEmailRegisterCode", key, code)}
}

func (_c *Notification_VerifyEmailRegisterCode_Call) Run(run func(key string, code string)) *Notification_VerifyEmailRegisterCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Notification_VerifyEmailRegisterCode_Call) Return(_a0 bool) *Notification_VerifyEmailRegisterCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Notification_VerifyEmailRegisterCode_Call) RunAndReturn(run func(string, string) bool) *Notification_VerifyEmailRegisterCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewNotification creates a new instance of Notification. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotification(t interface {
	mock.TestingT
	Cleanup(func())
}) *Notification {
	mock := &Notification{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
