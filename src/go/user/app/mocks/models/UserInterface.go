// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "market.goravel.dev/user/app/models"
)

// UserInterface is an autogenerated mock type for the UserInterface type
type UserInterface struct {
	mock.Mock
}

type UserInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *UserInterface) EXPECT() *UserInterface_Expecter {
	return &UserInterface_Expecter{mock: &_m.Mock}
}

// GetUserByEmail provides a mock function with given fields: email, fields
func (_m *UserInterface) GetUserByEmail(email string, fields []string) (*models.User, error) {
	ret := _m.Called(email, fields)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) (*models.User, error)); ok {
		return rf(email, fields)
	}
	if rf, ok := ret.Get(0).(func(string, []string) *models.User); ok {
		r0 = rf(email, fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(email, fields)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserInterface_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type UserInterface_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - email string
//   - fields []string
func (_e *UserInterface_Expecter) GetUserByEmail(email interface{}, fields interface{}) *UserInterface_GetUserByEmail_Call {
	return &UserInterface_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", email, fields)}
}

func (_c *UserInterface_GetUserByEmail_Call) Run(run func(email string, fields []string)) *UserInterface_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *UserInterface_GetUserByEmail_Call) Return(_a0 *models.User, _a1 error) *UserInterface_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserInterface_GetUserByEmail_Call) RunAndReturn(run func(string, []string) (*models.User, error)) *UserInterface_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: id, fields
func (_m *UserInterface) GetUserByID(id string, fields []string) (*models.User, error) {
	ret := _m.Called(id, fields)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) (*models.User, error)); ok {
		return rf(id, fields)
	}
	if rf, ok := ret.Get(0).(func(string, []string) *models.User); ok {
		r0 = rf(id, fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(id, fields)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserInterface_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type UserInterface_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - id string
//   - fields []string
func (_e *UserInterface_Expecter) GetUserByID(id interface{}, fields interface{}) *UserInterface_GetUserByID_Call {
	return &UserInterface_GetUserByID_Call{Call: _e.mock.On("GetUserByID", id, fields)}
}

func (_c *UserInterface_GetUserByID_Call) Run(run func(id string, fields []string)) *UserInterface_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *UserInterface_GetUserByID_Call) Return(_a0 *models.User, _a1 error) *UserInterface_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserInterface_GetUserByID_Call) RunAndReturn(run func(string, []string) (*models.User, error)) *UserInterface_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: name, email, password
func (_m *UserInterface) Register(name string, email string, password string) (*models.User, error) {
	ret := _m.Called(name, email, password)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*models.User, error)); ok {
		return rf(name, email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *models.User); ok {
		r0 = rf(name, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(name, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserInterface_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type UserInterface_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - name string
//   - email string
//   - password string
func (_e *UserInterface_Expecter) Register(name interface{}, email interface{}, password interface{}) *UserInterface_Register_Call {
	return &UserInterface_Register_Call{Call: _e.mock.On("Register", name, email, password)}
}

func (_c *UserInterface_Register_Call) Run(run func(name string, email string, password string)) *UserInterface_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserInterface_Register_Call) Return(_a0 *models.User, _a1 error) *UserInterface_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserInterface_Register_Call) RunAndReturn(run func(string, string, string) (*models.User, error)) *UserInterface_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserInterface creates a new instance of UserInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserInterface {
	mock := &UserInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
