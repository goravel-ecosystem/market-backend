name: Build Docker Image

on:
  create:
    tags:
      - '*'
jobs:
  build:
    strategy:
      matrix:
        go:
          - "1.21"
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.env_setup.outputs.tag }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up environment
      id: env_setup
      run: |
        REPO_TAG=${GITHUB_REF##*/}
        SERVER_NAME=${VERSION_STRING%-*}
        echo "REPO_TAG=$REPO_TAG" >> $GITHUB_ENV
        echo "SERVER_NAME=$SERVER_NAME" >> $GITHUB_ENV
        echo "::set-output name=tag::${GITHUB_REF##*/}"

    - uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}

    - name: go mod pakcage cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go }}-${{ hashFiles('**/go.mod') }}

    - name: Install dependencies
      run: cd ./src/go && go mod tidy

    - name: go build
      run: |
        echo $SERVER_NAME
        cd ./src/go/$SERVER_NAME && GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build --ldflags '-extldflags -static"' -o main .

    - name: Login to ACR
      uses: aliyun/acr-login@v1
      with:
        username: ${{ secrets.ALIYUN_ACR_USERNAME }}
        password: ${{ secrets.ALIYUN_ACR_PASSWORD }}
        region-id: ${{ secrets.ALIYUN_ACR_REGION_ID }}
        login-server: ${{ secrets.ALIYUN_ACR_LOGIN_SERVER }}

    - name: Build the Docker image
      run: cd ./src/go/$SERVER_NAME && docker build -t ${{ secrets.ALIYUN_ACR_REGISTRY }}:$REPO_TAG .

    - name: Push the Docker image
      run: docker push ${{ secrets.ALIYUN_ACR_REGISTRY }}:$REPO_TAG

  deploy-staging:
    needs: build
    uses: ./.github/workflows/deploy.yml
    with:
      env: staging
      tag: ${{ needs.build.outputs.tag }}
    secrets: inherit

  user:
    if: startsWith(github.ref, 'refs/tags/user-')
    environment: staging
    strategy:
      matrix:
        go:
          - "1.21"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up environment
        id: env_setup
        run: |
          echo "REPO_TAG=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      - name: go mod pakcage cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go }}-${{ hashFiles('**/go.mod') }}

      - name: Install dependencies
        run: cd ./src/go && go mod tidy

      - name: go build
        run: cd ./src/go/user && GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build --ldflags '-extldflags -static"' -o main .

      - name: Login to ACR
        uses: aliyun/acr-login@v1
        with:
          username: ${{ secrets.ALIYUN_ACR_USERNAME }}
          password: ${{ secrets.ALIYUN_ACR_PASSWORD }}
          region-id: ${{ secrets.ALIYUN_ACR_REGION_ID }}
          login-server: ${{ secrets.ALIYUN_ACR_LOGIN_SERVER }}

      - name: Build the Docker image
        run: cd ./src/go/user && docker build -t ${{ secrets.ALIYUN_ACR_REGISTRY }}:$REPO_TAG .

      - name: Push the Docker image
        run: docker push ${{ secrets.ALIYUN_ACR_REGISTRY }}:$REPO_TAG

      # This step can be moved to the deploy.yml file in the future
      - name: Load deploy configuration
        uses: actions-tools/yaml-outputs@v2
        id: load_config
        with:
          file-path: ./config/deploy.yml

      - name: Update remote server
        uses: appleboy/ssh-action@v1.0.0
        env:
          GRPC_PORT: ${{ steps.load_config.outputs.staging__user__grpc__port }}
          DB_HOST: ${{ steps.load_config.outputs.staging__user__db__host }}
          DB_PORT: ${{ steps.load_config.outputs.staging__user__db__port }}
          DB_DATABASE: ${{ steps.load_config.outputs.staging__user__db__database }}
          REDIS_HOST: ${{ steps.load_config.outputs.staging__user__redis__host }}
          REDIS_PORT: ${{ steps.load_config.outputs.staging__user__redis__port }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          envs: REPO_TAG,GRPC_PORT,DB_HOST,DB_PORT,DB_DATABASE,REDIS_HOST,REDIS_PORT
          script: |
            docker pull ${{ secrets.ALIYUN_ACR_REGISTRY }}:$REPO_TAG
            if docker ps --format '{{.Names}}' | grep goravel-market-user; then 
              docker stop goravel-market-user && docker rm goravel-market-user 
            fi
            docker run -dit \
              -p $GRPC_PORT:$GRPC_PORT \
              -e APP_ENV=staging \
              -e APP_KEY=${{ secrets.USER_APP_KEY }} \
              -e APP_DEBUG=true \
              -e GRPC_HOST=0.0.0.0 \
              -e GRPC_PORT=$GRPC_PORT \
              -e JWT_SECRET=${{ secrets.USER_JWT_SECRET }} \
              -e DB_HOST=$DB_HOST \
              -e DB_PORT=$DB_PORT \
              -e DB_DATABASE=$DB_DATABASE \
              -e DB_USERNAME=${{ secrets.POSTGRES_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
              -e REDIS_HOST=$REDIS_HOST \
              -e REDIS_PORT=$REDIS_PORT \
              -e MAIL_HOST=${{ secrets.MAIL_HOST }} \
              -e MAIL_PORT=${{ secrets.MAIL_HOST }} \
              -e MAIL_USERNAME=${{ secrets.MAIL_USERNAME }} \
              -e MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }} \
              --network goravel-market \
              --network-alias user \
              --name goravel-market-user \
              ${{ secrets.ALIYUN_ACR_REGISTRY }}:$REPO_TAG
