name: Deploy

jobs:
  deploy:
    environment: ${{ inputs.env }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Load configuration
      uses: actions-tools/yaml-outputs@v2
      id: load_config
      with:
        export-env-variables: false
        file-path: ./deploy/config.yml

    # ************************** IMPORTANT **************************
    # Add the variables that needed by microservices here, the prefix must be INPUT_, it's a rule of the action.
    # You only need to modify this step when you add a new microservice.
    - name: Set environment variables
      run: |
        # DEFAULT VARIABLES, DONT MODIFY
        TAG=${{ inputs.tag }}
        APP_NAME=${TAG%-*}
        echo "INPUT_APP_ENV=${{ inputs.env }}" >> $GITHUB_ENV
        echo "INPUT_APP_NAME=$APP_NAME" >> $GITHUB_ENV
        echo "INPUT_IMAGE=${{ secrets.ALIYUN_ACR_REGISTRY }}:${{ inputs.tag }}" >> $GITHUB_ENV
        echo "INPUT_DEPLOY=$(cat ./deploy/$APP_NAME/deploy.sh | base64 | tr -d '\n')" >> $GITHUB_ENV
        echo "INPUT_DB_HOST=${{ steps.load_config.outputs.staging__db__host }}" >> $GITHUB_ENV
        echo "INPUT_DB_PORT=${{ steps.load_config.outputs.staging__db__port }}" >> $GITHUB_ENV
        echo "INPUT_DB_USERNAME=${{ secrets.POSTGRES_USERNAME }}" >> $GITHUB_ENV
        echo "INPUT_DB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV
        echo "INPUT_REDIS_HOST=${{ steps.load_config.outputs.staging__redis__host }}" >> $GITHUB_ENV
        echo "INPUT_REDIS_PORT=${{ steps.load_config.outputs.staging__redis__port }}" >> $GITHUB_ENV
        echo "INPUT_MAIL_HOST=${{ secrets.MAIL_HOST }}" >> $GITHUB_ENV
        echo "INPUT_MAIL_PORT=${{ secrets.MAIL_PORT }}" >> $GITHUB_ENV
        echo "INPUT_MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> $GITHUB_ENV
        echo "INPUT_MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> $GITHUB_ENV

        # CUSTOM VARIABLES, MODIFY WHEN YOU ADD A NEW MICROSERVICE
        echo "INPUT_GATEWAY_APP_KEY=${{ secrets.GATEWAY_APP_KEY }}" >> $GITHUB_ENV
        echo "INPUT_GATEWAY_HTTP_PORT=${{ steps.load_config.outputs.staging__gateway__http__port }}" >> $GITHUB_ENV
        echo "INPUT_GATEWAY_GATEWAY_PORT=${{ steps.load_config.outputs.staging__gateway__gateway__port }}" >> $GITHUB_ENV
        
        echo "INPUT_USER_APP_KEY=${{ secrets.USER_APP_KEY }}" >> $GITHUB_ENV
        echo "INPUT_USER_JWT_SECRET=${{ secrets.USER_JWT_SECRET }}" >> $GITHUB_ENV
        echo "INPUT_USER_GRPC_HOST=${{ steps.load_config.outputs.staging__user__grpc__host }}" >> $GITHUB_ENV
        echo "INPUT_USER_GRPC_PORT=${{ steps.load_config.outputs.staging__user__grpc__port }}" >> $GITHUB_ENV
        echo "INPUT_USER_DB_DATABASE=${{ steps.load_config.outputs.staging__user__db__database }}" >> $GITHUB_ENV

    - name: Login to ACR
      uses: aliyun/acr-login@v1
      with:
        username: ${{ secrets.ALIYUN_ACR_USERNAME }}
        password: ${{ secrets.ALIYUN_ACR_PASSWORD }}
        region-id: ${{ secrets.ALIYUN_ACR_REGION_ID }}
        login-server: ${{ secrets.ALIYUN_ACR_LOGIN_SERVER }}

    - name: Deploy
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT }}
        allenvs: true
        script: |
          docker pull $INPUT_IMAGE
          APP_DOCKER_NAME=goravel-market-$INPUT_APP_ENV-$INPUT_APP_NAME
          if docker ps --format '{{.Names}}' | grep $APP_DOCKER_NAME; then 
            docker stop $APP_DOCKER_NAME && docker rm $APP_DOCKER_NAME
          fi
          echo $INPUT_DEPLOY | base64 -d | bash

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'The environment'
        required: true
        type: choice
        options:
          - staging
          - production
      tag:
        description: 'The repository tag'
        required: true
        type: string
  workflow_call:
    inputs:
      env:
        description: 'The environment: staging or production'
        required: true
        type: string
      tag:
        description: 'The repository tag'
        required: true
        type: string
